"""
Ribofy: One step wrapper for get_offset, get_phasing and get_results in the ribofy pipeline using default setting.

Before usage, retrieve ORFs in genome using the get_ORFs.py script. This generates the 
ribofy ORFs-file used as input (--orfs).

Each sub-script has its own output: <prefix>_offset.txt, <prefix>_phasing.txt and <prefix>_results.txt, respectively.

The <prefix>_results.txt is the final output with typically the 

usage:
python ribofy.py --bam <bamfile> --orfs <ribofy orfs-file> --prefix <prefix for output-files>

"""


import sys
from . import __version__
from .argparse2 import argparse2
from .get_phasing import get_phasing
#from .get_phasing_pool import get_phasing_pool
from .get_offset import get_offset
from .get_results import get_results


def ribofy_detect ():

    info_text = """
        ribofy detect: extracts phased riboseq reads across pre-defined ORFs
    """

    help_text = f"""    
        ribofy detect - version {__version__}

        required arguments:
        --bam <file>                Bam file - sorted and indexed
        --orfs <file>               orfs - generated by ribofy orfs
        --prefix <str>              output prefix, default=ribofy   

        optional arguments:
        --min_read_length <int>     Minimun readlength considered, default=25
        --max_read_length <int>     Maximum readlength considered, default=35

        For offsets:
        --offset <file>             Use pre-established offsets from a previous run
        --norfs <int>               Number of distinct ORFs to determine offsets, default=20
        --percentile <float>        Percentile of consistent offset-determinants in checked orfs.
                                    Default=0.9. i.e. 90% of analysed ORFs must agree on offset for 
                                    the read_length in question to be included in phasing
        --alpha <float>             The p-value cutoff when determining phasing for a read_length 
                                    to be considered in phasing, default=0.01
                                    
        
        usage: ribofy detect --bam BAM --orfs ORFS [--prefix PREFIX]"""

     
    parser = argparse2 (
        description=info_text,
        usage=help_text,
        help=help_text
    )
    parser.add_argument('detect', nargs=1, help='') # dummy argument
    #parser._action_groups.pop()

    # required    
    parser.add_argument("--bam", nargs="+", dest='bam', type=str, required=True)
    parser.add_argument("--orfs", dest='orfs', type=str, required=True)
    parser.add_argument("--prefix", dest='prefix', type=str, default = "ribofy")

    #optional    
    parser.add_argument('--norfs', dest='norfs', default = 20, type = int, help="number of distinct orfs to build offsets")
    parser.add_argument('--min_read_length', dest='min_read_length', default = 25, type = int, help="minimum read length used in analysis")
    parser.add_argument('--max_read_length', dest='max_read_length', default = 35, type = int, help="maximum read length used in analysis")
    parser.add_argument('--offset', dest='offset', default = "", type = str, help="pre-established offset")
    parser.add_argument("--percentile", dest='percentile', default = 0.9, help="Percentile of consistent offset-determinants")
    parser.add_argument("--alpha", dest='alpha', default = 0.01, help="cutoff p-value for phase-detection at percentile")
    parser.add_argument("--p_method", dest='p_method', default="wilcox", choices = ["wilcox", "binom"], help="statistics used for enrichment of phased reads; either wilcox or binom")
    parser.add_argument("--keep_pseudo", dest='keep_pseudo', action='store_true', default=False, help="Keep pseudogenes in analysis?")
    parser.add_argument("--devel", dest='devel', action="store_true")
    args = parser.parse_args()
    
    offset = f"{args.prefix}_offsets.txt" if args.offset == "" else args.offset
    phasing = f"{args.prefix}_phasing.txt" 
    result = f"{args.prefix}_results.txt"



    if args.offset == "":

        get_offset (args.bam, args.orfs, offset, 
                    norfs=args.norfs,
                    min_read_length=args.min_read_length, 
                    max_read_length=args.max_read_length,
                    percentile=args.percentile,                
                    devel=args.devel)


    get_phasing (args.bam, args.orfs, offset, phasing, 
                percentile=args.percentile,
                alpha=args.alpha,
                devel=args.devel)

    get_results (phasing, result,
                keep_pseudo=args.keep_pseudo,
                p_method=args.p_method)


if __name__ == "__main__":
    ribofy_detect ()
   
