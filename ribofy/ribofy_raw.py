import sys
import argparse
import pandas as pd

from . import __version__
from .argparse2 import argparse2
from .get_phasing import get_psites, get_phasing_matrix
from .get_offset import get_offset


def get_raw_data (id, orfs, bams, offsets=[], output=""):
    
    print ("reading orfs...")

    pd_orfs = pd.read_csv (orfs, sep="\t")
    pd_gene = pd_orfs[pd_orfs.orf_id == id]
    
    if pd_gene.shape[0] == 0:
        pd_gene = pd_orfs[pd_orfs.tid == id]
    if pd_gene.shape[0] == 0:
        pd_gene = pd_orfs[pd_orfs.gid == id]
    if pd_gene.shape[0] == 0:
        pd_gene = pd_orfs[pd_orfs.symbol == id]

    if pd_gene.shape[0] == 0:
        print (f"{id} not found")
        sys.exit ()

    
    if len (offsets) == 0:
        pd_offsets = get_offset (bams, pd_orfs)
    else:
        print ("loading offsets...")
        pd_offsets = pd.concat ([pd.read_csv (o, sep="\t") for o in offsets])

    output_raw = output if output != "" else f'{id}.txt'
    loutput = []
    for idx, row in pd_gene.iterrows ():
                
        print (f"retrieving p-sites ({row['tid']})...")
        cds = get_psites (row['tid'], row['start'], row['stop'], bams, pd_offsets)

        mat = get_phasing_matrix (cds)

        pd_data = pd.DataFrame (mat, columns=[f"frame{f}" for f in range (3)])
        pd_data['codon'] = pd_data.index

        pd_data['orf_id'] = row['orf_id']
        pd_data['tid'] = row['tid']
        
        loutput.append (pd_data)


    pd_output = pd.concat (loutput)
    pd_output.to_csv (output_raw, sep="\t")



def ribofy_raw ():

    info_text = """
        ribofy raw: extracting raw count ditribution on specified ORFs
    """

    help_text = f"""    
        ribofy plot - version {__version__}

        required arguments:
        --id <str>                  transcript id, gene id or gene name of interest - 
                                    and the output pdf will be named 'id'.pdf
        --orfs <file>               ORF list - generated by 'ribofy orfs'
        --bams <files>              list of bam-files to extract p-sites from (e.g. *.bam). 
                                    bam-files must be sorted and indexed

        optional arguments:
        --offsets <files>           if 'ribofy detect' has already been performed, supply 
                                    the offsets.txt file to avoid re-infering offsets (e.g. *_offset.txt).
        --output <file>             Output pdf filename, if omitted, the file will be named 'id'.pdf
        --start <int>               plot only from start position
        --end <int>                 plot only uptil end position

        
        usage: ribofy plot --id ID --orfs ORFS --bams BAM1 BAM2...  [--offsets OFFSET1 OFFSET2...]\n\n"""


    parser = argparse2 (
        description=info_text,
        usage=help_text,
        help=help_text
    )

    parser.add_argument('plot', nargs='?', help='') # dummy positional argument    
    
    parser.add_argument("--id", dest='id', type=str, required=True, help="tid/gid/symbol")
    parser.add_argument("--orfs", dest='orfs', type=str, required=True, help="orfs")
    parser.add_argument("--bams", dest='bams', nargs="+", type=str, required=True, help="bams")

    parser.add_argument("--offsets", dest='offsets', nargs="+", type=str, default=[], help="offsets")
    parser.add_argument("--output", dest='output', type=str, default="")
    
   
    args = parser.parse_args()

    get_raw_data (args.id, args.orfs, args.bams, 
                 offsets=args.offsets,
                 output=args.output)


if __name__ == "__main__":

    ribofy_raw ()







        
