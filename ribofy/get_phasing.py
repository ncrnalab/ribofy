"""
For each ORF, get_phasing determines P-site positions for all mapped reads and computes statistics for on-frame enrichment

usage:
python get_phasing.py --bam <bam-file> --orfs <ribofy orfs-file> --offsets <ribofy offsets-file> --output <output-file>

"""


import sys
import argparse
import pysam
import pandas as pd
import numpy as np
from tqdm import tqdm
from scipy.stats import wilcoxon, binomtest
from .bam_utils import get_tid_info



def get_phasing_matrix (cds):
    
    mat = np.array ([[s for i, s in enumerate (cds) if i%3 == 0], # on-frame
                     [s for i, s in enumerate (cds) if i%3 == 1],
                     [s for i, s in enumerate (cds) if i%3 == 2]]).T

    return (mat)


def get_phasing_stats (mat):

    # remove codons without any signal
    mat = mat[~np.all(mat == 0, axis=1)]

    # wilcoxon-test for frame0 > mean (frame1, frame2)
    # diff = mat[:,0] - np.mean (mat[:,1:3], axis=1)
    # non_zero = np.sum(diff != 0)
    #mode = "exact" if non_zero <= 25 else "auto"            
    wilcox_stat, wilcox_p = wilcoxon(mat[:,0], np.mean (mat[:,1:3], axis=1), alternative="greater") if mat.shape[0] >= 10 else (np.nan, np.nan)

    # binomial-test for n(frame0 > frame1 and frame0 > frame2)
    # add random noise to account for draw-bias
    mat = mat + np.random.uniform(low=0.0, high=0.99, size=mat.shape)

    index_max = np.argmax (mat, axis=1)
    binom_p = binomtest (k=np.sum (index_max == 0), n=len(index_max), p=1/3, alternative="greater").pvalue if len (index_max) > 0 else np.nan

    return (wilcox_p, binom_p)

def get_phasing (bamfile, orfs, offsets, output):

    print ("### get_phasing ###")

    print ("loading bam...")
    
    bam = pysam.Samfile (bamfile)

    dtid2count, dtid2ref = get_tid_info (bamfile)

    print ("loading offsets...")

    pd_offsets = pd.read_csv (offsets, sep="\t")

    header = {}

    # output file
    fout = open (output, "w")


    # checking orfs - line by line
    print ("checking orfs...")

    num_lines = sum(1 for line in open(orfs,'r'))

    with open(orfs, 'r') as f:

        for i, line in enumerate (tqdm(f, total=num_lines)):

            columns = line.strip ("\n").split ("\t")

            if i == 0:
                for icol, col in enumerate (columns):
                    header[col] = icol

                # printing output header
                print ("\t".join (columns + ["frame0", "frame1", "frame2", "p_wilcox", "p_binom"]), file=fout)
                continue
                
            bam_offsets = pd_offsets[pd_offsets.bam == bamfile]
            doffsets = bam_offsets[["read_length", "offset"]].set_index('read_length').to_dict ()['offset']
            
            tid, start, stop = dtid2ref[columns[header['tid']]], int(columns[header['start']]), int(columns[header['stop']])+3

            # print (tid, file=sys.stderr)

            cds = [0] * (stop-start)

            if len(cds)%3 != 0:
                print (f"ERROR: CDS-length invalid {tid}:{start}-{stop}")
                continue

            for read in bam.fetch (tid, start, stop):
                        
                read_length = read.infer_read_length () 
                
                if not read_length in doffsets:
                    continue

                length_offset = doffsets[read_length]
                
                offset_pos = read.pos + length_offset
                        
                if offset_pos >= start and offset_pos < stop: 
                    cds[offset_pos-start] += 1


            mat, wilcox_p, binom_p = get_phasing_stats (cds)
            
            print ("\t".join (columns + [str(sum(mat[:,0])), str(sum(mat[:,1])), str(sum(mat[:,2])), str(wilcox_p), str(binom_p)]), file=fout)

    print ("done")


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='get phasing')
    parser.add_argument("--bam", dest='bam', required=True, help="Bam file - sorted and indexed")
    parser.add_argument("--orfs",   dest='orfs', required=True, help="orfs - generated by get_ORFs.py")
    parser.add_argument("--offsets", dest='offsets', required=True, help="offsets - generated by get_offsets.py")
    parser.add_argument("--output", dest='output', default = "ribofy_phasing.txt", help="output")
    args = parser.parse_args()

    get_phasing (args.bam, args.orfs, args.offsets, args.output)