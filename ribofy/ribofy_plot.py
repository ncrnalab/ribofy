import sys
import argparse
import pandas as pd

from . import __version__
from .argparse2 import argparse2
from .get_phasing import get_psites
from .get_offset import get_offset

import matplotlib    
matplotlib.use('Agg')    
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.backends.backend_pdf import PdfPages


def plot_psites (id, orfs, bams, offsets=[], output="", plot_start=None, plot_end=None):
    
    print ("reading orfs...")

    pd_orfs = pd.read_csv (orfs, sep="\t")

    pd_gene = pd_orfs[pd_orfs.tid == id]
    if pd_gene.shape[0] == 0:
        pd_gene = pd_orfs[pd_orfs.gid == id]
    if pd_gene.shape[0] == 0:
        pd_gene = pd_orfs[pd_orfs.symbol == id]

    if pd_gene.shape[0] == 0:
        print (f"{id} not found")
        sys.exit ()

    
    if len (offsets) == 0:
        pd_offsets = get_offset (bams, pd_orfs)
    else:
        print ("loading offsets...")
        pd_offsets = pd.concat ([pd.read_csv (o, sep="\t") for o in offsets])
        
    
    output_pdf = output if output != "" else f'{id}.pdf'

    with PdfPages(output_pdf) as pdf:


        for tid in list(set(pd_gene.tid.values)):

            pd_tid = pd_gene[pd_gene.tid == tid] 
                    
            length = pd_tid.tid_length.values[0]
            symbol = pd_tid.symbol.values[0]
            
            print (f"retrieving p-sites ({tid})...")
            cds = get_psites (tid, 0, length, bams, pd_offsets)

            print ("plotting...")

            frame_color = {
                0:"green",
                1:"blue",
                2:"red"       
            }

            fig, ax = plt.subplots (figsize=(20, 10)) #, dpi=600)
            
            start = 0 if plot_start == None else plot_start
            end = len(cds) if plot_end == None else plot_end

            for i in range (3):

                x = [p for p in range (len (cds)) if p%3==i and p >= start and p<end]
                y = [cds[p] for p in range (len (cds)) if p%3==i and p >= start and p<end] 

                ax.bar (x, y, color=frame_color[i], label=f"frame{i}")

            max_y = max ([cds[p] for p in range (len (cds)) if p >= start and p<end])
            max_y = max ([max_y, 10])

            frame_unit = max_y/100
            min_y = -frame_unit*5
            ax.set_ylim ([min_y, max_y])
                    
            print ("adding orfs...")

            for idx, row in pd_tid.iterrows():  
                start = int(row['start']) 
                length = int(row['orf_length'])
                frame = int(row['frame'])
                frame_y_pos = -(frame+2) * frame_unit

                #print (start, length, frame)
                
                ax.add_patch (Rectangle ((start, frame_y_pos), length, frame_unit-1, color=frame_color[frame], linewidth=0))

            ax.legend ()

            ax.set_title (f"{symbol}_{tid}", fontsize = 14)

            print ("saving...")

            pdf.savefig (fig)

            #plt.savefig(tid + ".png")
            #plt.savefig(f"{symbol}_{tid}.pdf", format='pdf')




def ribofy_plot ():

    info_text = """
        ribofy plot: extracting ORFs from GTF
    """

    help_text = f"""    
        ribofy plot - version {__version__}

        required arguments:
        --id <str>                  transcript id, gene id or gene name of interest - 
                                    and the output pdf will be named 'id'.pdf
        --orfs <file>               ORF list - generated by 'ribofy orfs'
        --bams <files>              list of bam-files to extract p-sites from (e.g. *.bam). 
                                    bam-files must be sorted and indexed

        optional arguments:
        --offsets <files>           if 'ribofy detect' has already been performed, supply 
                                    the offsets.txt file to avoid re-infering offsets (e.g. *_offset.txt).
        --output <file>             Output pdf filename, if omitted, the file will be named 'id'.pdf
        --start <int>               plot only from start position
        --end <int>                 plot only uptil end position

        
        usage: ribofy plot --id ID --orfs ORFS --bams BAM1 BAM2...  [--offsets OFFSET1 OFFSET2...]\n\n"""


    parser = argparse2 (
        description=info_text,
        usage=help_text,
        help=help_text
    )

    parser.add_argument('plot', nargs='?', help='') # dummy positional argument    
    
    parser.add_argument("--id", dest='id', type=str, required=True, help="tid/gid/symbol")
    parser.add_argument("--orfs", dest='orfs', type=str, required=True, help="orfs")
    parser.add_argument("--bams", dest='bams', nargs="+", type=str, required=True, help="bams")

    parser.add_argument("--offsets", dest='offsets', nargs="+", type=str, default=[], help="offsets")
    parser.add_argument("--output", dest='output', type=str, default="")
    
    parser.add_argument("--start", dest='start', type=int, default=None)
    parser.add_argument("--end", dest='end', type=int, default=None)


    args = parser.parse_args()

    plot_psites (args.id, args.orfs, args.bams, 
                 offsets=args.offsets,
                 output=args.output,
                 plot_start=args.start, 
                 plot_end=args.end)


if __name__ == "__main__":

    ribofy_plot ()







        




